(()=>{var C=Object.defineProperty;var E=(n,t,e)=>t in n?C(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var v=(n,t,e)=>(E(n,typeof t!="symbol"?t+"":t,e),e);var k={subtree:!0,attributes:!0,childList:!0,characterData:!1,characterDataOldValue:!1},i=class extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"closed"}),this.shadow.appendChild(this.template.content.cloneNode(!0)),this.initElements()}connectedCallback(){this.disconnectController=new AbortController,this.disconnectedSignal=this.disconnectController.signal,this.addListeners()}disconnectedCallback(){this.disconnectController.abort(),this.removeMutations()}initElements(){for(let t of Object.keys(this.elements)){let e=Array.from(this.shadow.querySelectorAll(this.elements[t]));this[t]=e?.length===1?e[0]:e}return this}addListeners(){return this.addEvents().addMutations()}addEvents(){for(let t of Object.keys(this.listeners)){let e=this.listeners[t],o;for(let s of Object.keys(e)){let a=t==="root"?[this.getRootNode()]:Array.from(this.shadow.querySelectorAll(t));typeof e[s]=="function"?o=e[s]:(console.group("TypeError: EventHandler"),console.error("EventHandler is not a function"),console.error("Handler Configuration: %o",e),console.groupEnd()),a.forEach(r=>{r.addEventListener(s,o,{signal:this.disconnectedSignal})})}}return this}addMutations(){if(!!this.hasMutations){this.initMutationObserver();for(let t of Object.keys(this.mutations)){let e=t==="root"?this:this[t];this.mutationCallbacks=[...this.mutationCallbacks||[],{node:e,callbacks:this.mutations[t]}]}return this}}removeMutations(){this._mutationObserver&&this._mutationObserver.disconnect()}initMutationObserver(){if(!this._mutationObserver){let t=this.mutationObserverOptions||k;this._mutationObserver=new MutationObserver(this.mutationHandler.bind(this)),this._mutationObserver.observe(this,t),this._mutationObserver.observe(this.shadow,t)}}mutationHandler(t,e){for(let o of t){let s=this.mutationCallbacks.find(a=>Array.isArray(a.node)?a.node.filter(r=>r===o.target).length>0:a.node===o.target)?.callbacks;s&&Object.values(s).forEach(a=>{[a].flat().filter(r=>r[o.type]).forEach(r=>{try{r[o.type](o,e)}catch{console.group("TypeError: MutationHandler"),console.error("MutationHandler is not a function"),console.error("Mutation: %o",o),console.error("Handler Configuration: %o",r),console.groupEnd()}})})}}static initComponent(t,e,o){e.prototype.template=document.createElement("template"),e.prototype.template.innerHTML=o,customElements.define(t,e)}get elements(){return{}}get listeners(){return{}}get mutations(){return{}}get hasMutations(){return Object.keys(this.mutations).length>0}};var u=24,w="https://dummyjson.com/products",m=class extends i{get elements(){return{items:".items"}}async connectedCallback(){if(console.time("Category"),super.connectedCallback(),this.dataset.pwa==="true")try{let t=await this.load(),e=this.initProducts(t);this.render(e)}catch(t){console.error(t)}console.timeEnd("Category")}async load(){console.groupCollapsed("Start load timer."),console.time("load");let o=(await(await fetch(w)).json())?.products?.slice(0,u);return console.timeEnd("load"),console.groupEnd(),o}initProducts(t){console.groupCollapsed("Creating product tiles..."),console.time("initProducts");let e=[];return t.forEach(o=>{let s=document.createElement("category-item");s.productData=o,e.push(s)}),console.log(`...${u} product tiles created`),console.timeEnd("initProducts"),console.groupEnd(),e}render(t){console.groupCollapsed("Render tiles"),console.time("render"),t.forEach((e,o)=>{o===4&&e.classList.add("wide"),o===12&&e.classList.add("big"),this.appendChild(e)}),console.log(`${u} product tiles rendered`),console.timeEnd("render"),console.groupEnd()}get products(){return this.items.querySelector("slot").assignedElements()}},L=`
<style>
.items {
  display: grid;
  gap: var(--gap-l);
  grid-template-columns: repeat(auto-fit, minmax(var(--product-tile-width), 1fr));
  grid-auto-flow: dense;
}
</style>
<h2>Category</h2>
<div class="items">
  <slot></slot>
</div>
`;i.initComponent("category-list",m,L);var g=class extends i{#t=null;static get observedAttributes(){return["data-img","data-brand","data-title","data-price","data-description"]}get elements(){return{imgNode:"figure img",brandNode:".product-data h4",titleNode:".product-data h3",priceNode:".product-data span",hover:"category-item-hover"}}attributeChangedCallback(t,e,o){if(e===o)return;let s=t.split("-").pop();switch(t){case"data-img":this[`${s}Node`].src=this.img;break;case"data-title":case"data-brand":case"data-price":this[`${s}Node`].innerText=this[s];break}this.hover?.renderData&&this.hover.renderData()}set productData(t){this.#t=t,this.title=t.title,this.brand=t.brand,this.price=t.price,this.img=t.images[0],this.description=t.description}get productData(){return this.#t}get img(){return this.dataset.img}set img(t){this.dataset.img=t.toString()}get title(){return this.dataset.title}set title(t){this.dataset.title=t.toString()}get brand(){return this.dataset.brand}set brand(t){this.dataset.brand=t.toString()}get price(){return parseFloat(this.dataset.price).toFixed(2)}set price(t){this.dataset.price=t.toString()}get description(){return this.dataset.description}set description(t){this.dataset.description=t.toString()}},S=`
<style>
:host {
  box-shadow: var(--list-item-shadow);
  background-color: hsl(0 0% 95%);
  display: grid;
  grid-template-rows: min-content;
  row-gap: var(--gap);
  grid-template-areas:
    "img"
    "data";
  padding-block-end: var(--gap);
  border-radius: var(--border-radius);
  overflow: hidden;
  position: relative;
}

figure {
  margin: 0;
  padding: 0;
  grid-area: img;
  width: 100%;
  aspect-ratio: 3 / 4;
}
img {
  background-color: hsl(0 0% 85%);
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.product-data {
  padding-inline: var(--gap);
  display: grid;
  row-gap: var(--gap);
  grid-area: data;
  grid-template-rows: max-content 1fr max-content;
  grid-template-areas:
    "brand"
    "title"
    "price";
}

.product-data > * {
  padding: 0;
  margin: 0;
}

h4 {
  grid-area: brand;
}

h3 {
  grid-area: title;
}

span {
  grid-area: price;
  text-align: right;
  font-weight: bold;
  font-size: larger;
}
category-item-hover {
    transform: translateY(120%);
    transition: transform 250ms ease-out;
}
:host(:hover) category-item-hover {
    transform: translateY(0);
}
</style>
<figure part="product-tile-media">
    <img loading="lazy" part="product-tile-media-image">
</figure>
<div class="product-data">
    <h4 part="product-tile-heading"></h4>
    <h3 part="product-tile-heading"></h3>
    <span part="product-tile-price"></span>
</div>
<category-item-hover exportparts="product-tile-price"></category-item-hover>
`;i.initComponent("category-item",g,S);var b=class extends i{get elements(){return{brandNode:"h4",titleNode:"h3",descriptionNode:"p",priceNode:"span"}}connectedCallback(){super.connectedCallback(),this.renderData()}renderData(){this.brandNode.innerText=this.parentNode.host.brand,this.titleNode.innerText=this.parentNode.host.title,this.descriptionNode.innerText=this.parentNode.host.description,this.priceNode.innerText=this.parentNode.host.price}},T=`
<style>
:host {
  position: absolute;
  inset: auto 0 0;
  background: var(--white);
  border-top-left-radius: var(--border-radius);
  border-top-right-radius: var(--border-radius);
  box-shadow: var(--category-item-hover-shadow);
  background-color: hsl(0 0% 95%);
  display: grid;
  grid-template-rows: min-content;
  row-gap: var(--gap);
  grid-template-rows: min-content min-content 1fr min-content min-content;
  grid-template-areas:
    "brand"
    "title"
    "description"
    "price"
    "buttons";
  padding: var(--gap);
}
:host > * {
  padding: 0;
  margin: 0;
}
h4 {
  grid-area: brand;
}
h3 {
  grid-area: title;
}
p {
  grid-area: description;
}
span {
  grid-area: price;
  text-align: right;
  font-weight: bold;
  font-size: larger;
}
.buttons {
  grid-area: buttons;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: var(--gap-s);
}
.buttons button {
  width: 100%;
  border: none;
  background: var(--black);
  color: var(--white);
  padding: var(--gap) var(--gap-l);
  font-weight: bold;
  font-size: larger;
}
.buttons button.cta {
  background: var(--clr-cta);
}
</style>
<h4></h4>
<h3></h3>
<p></p>
<span part="product-tile-price"></span>
<div class="buttons">
    <button>Details</button>
    <button class="cta">Cart</button>
</div>
`;i.initComponent("category-item-hover",b,T);var h=class extends i{get elements(){return{contentSlot:"div.content slot",contentNode:"div.content"}}get listeners(){return{"div.label":{click:this.toggle.bind(this)}}}connectedCallback(){this.classList.contains("clone")||(super.connectedCallback(),this.dataset.open=this.dataset.open??(!1).toString(),this.initClone())}initClone(){this.clone=new this.constructor,this.clone.innerHTML=this.innerHTML,this.clone.classList.add("clone"),this.parentNode.appendChild(this.clone),requestAnimationFrame(()=>{this.style.setProperty("--height",this.clone.contentNode.offsetHeight)})}attributeChangedCallback(t,e,o){!this.isConnected||e===o||t==="data-open"&&(this.open=o==="true",this.dispatchEvent(new CustomEvent("change",{detail:this})))}update(){this.open&&this.style.setProperty("--height",this.clone.contentNode.offsetHeight)}toggle(){this.open=!this.open,this.update()}get open(){return this.dataset.open==="true"}set open(t){this.open!==!!t&&(this.dataset.open=(!!t).toString())}};v(h,"observedAttributes",["data-open"]);var x=`
<style>
:host {
    display: block;
    overflow: hidden;
    position: relative;
}
div.label {
    cursor: pointer;
}
:host(:not(.clone)) div.content {
    max-height: 0;
}
div.content,
div.content slot::slotted(*) {
    transition: all var(--transition-duration, 250ms) var(--transition-timing-function, ease-in-out);
}
:host(:not(.clone)[data-open="true"]) div.content {
    max-height: calc(var(--height) * 1px);
}
:host(:not(.clone):not([data-open="true"])) div.content slot::slotted(*) {
    margin-block: 0;
}
:host(.clone) {
    position: absolute;
    left: -200vw;
    width: 100%;
}
</style>
<div class="label"><slot name="label"></slot></div>
<div class="content"><slot></slot></div>
`;i.initComponent("accordion-item",h,x);var f=class extends i{get elements(){return{itemSlot:"slot"}}connectedCallback(){super.connectedCallback();let t={signal:this.disconnectedSignal};window.addEventListener("resize",()=>this.updateItemList(),t),this.itemSlot.addEventListener("slotchange",()=>this.updateItemList(0),t),screen.orientation?screen.orientation.addEventListener("change",()=>this.updateItemList(),t):window.addEventListener("orientationchange",()=>this.updateItemList(),t),this.itemChangeHandler=this.handleItemChange.bind(this),this.items.forEach(e=>e.addEventListener("change",this.itemChangeHandler,t))}handleItemChange(t){this.items.forEach(e=>e.removeEventListener("change",this.itemChangeHandler)),t.detail.open&&!this.multi&&this.items?.filter(e=>e!==t.detail).forEach(e=>e.open=!1),this.items.forEach(e=>e.addEventListener("change",this.itemChangeHandler,{signal:this.disconnectedSignal}))}updateItemList(t=null){let e=t??50;this.debounceTimeout&&clearTimeout(this.debounceTimeout),this.debounceTimeout=setTimeout(()=>{this.items.forEach(o=>o.update())},e)}closeAll(){this.items.forEach(t=>t.open=!1)}get items(){return Array.from(this.querySelectorAll("accordion-item:not(.clone)"))}get multi(){return typeof this.dataset.multi<"u"}},H=`
<style>
:host {
    position: relative;
    display: block;
}
</style>
<slot></slot>
`;i.initComponent("accordion-box",f,H);var d=class extends i{get elements(){return{button:"button",input:"input"}}get listeners(){return{button:{click:this.addHandler.bind(this)},input:{keydown:this.addHandler.bind(this)}}}get mutations(){return{root:[{childList:(t,e)=>this.updateCounter(t,e)}]}}get mutationObserverOptions(){return{childList:!0}}updateCounter(){this.shadow.querySelector("h3 span:first-of-type").innerHTML=this.todos.filter(t=>t.done).length.toString(),this.shadow.querySelector("h3 span:last-of-type").innerHTML=this.todos.length.toString()}addHandler(t){t.type==="keydown"&&t.code!=="Enter"||this.input.validity.valid&&(this.addTodo(this.input.value),this.input.value="")}addTodo(t){let e=document.createElement("todo-item");e.dataset.label=t,this.appendChild(e)}get todos(){return Array.from(this.querySelectorAll("todo-item")).map(t=>({label:t.label,done:t.checked}))}set todos(t){this.querySelectorAll("todo-item").forEach(e=>e.delete()),t.forEach(e=>this.addTodo(t))}};d.prototype.template=document.createElement("template");d.prototype.template.innerHTML=`
<style>
.add {
  padding: var(--list-item-padding);
  display: flex;
  gap: var(--item-padding-inline);
}
</style>
<h2><slot name="header">You should set a header</slot></h2>
<h3>Done: <span></span> / <span></span></h3>
<section class="add">
  <input placeholder="Todo" required min="3"><button>Add</button>
</section>
<section class="items">
    <slot></slot>
</section>
`;customElements.define("todo-list",d);var l=class extends i{static get observedAttributes(){return["data-done"]}get elements(){return{button:"button",input:"input"}}get listeners(){return{button:{click:this.deleteHandler.bind(this)},input:{change:this.updateHandler.bind(this)}}}connectedCallback(){super.connectedCallback(),this.label=this.dataset.label,this.checked=this.dataset.done==="true",this.parentNode.updateCounter()}attributeChangedCallback(t,e,o){!this.input||e===o||t==="data-done"&&(this.checked=o==="true")}updateHandler(){this.dataset.done=this.checked.toString(),this.toggleLineThrough(),this.parentNode.updateCounter()}deleteHandler(){this.parentNode.removeChild(this)}toggleLineThrough(){this.input.parentNode.classList.toggle("done",this.checked)}get checked(){return this.input.checked}set checked(t){this.checked!==!!t&&(this.input.checked=!!t,this.toggleLineThrough(),this.input.dispatchEvent(new Event("change")))}get label(){return this.shadow.querySelector("label span").innerHTML}set label(t){this.shadow.querySelector("label span").innerHTML=t}};l.prototype.template=document.createElement("template");l.prototype.template.innerHTML=`
<style>
:host {
  display: flex;
  justify-content: space-between;
  background: var(--clr-bg-list-item);
  padding: var(--list-item-padding);
}
:host(:hover) {
  background-color: var(--clr-bg-list-item-hover);
}
label.done span {
  text-decoration: line-through;
}
</style>
<label>
    <input type="checkbox">
    <span></span>
</label>
<button>Delete</button>
`;customElements.define("todo-item",l);var c=class extends i{get elements(){return{my:".myElement",button:".button"}}get listeners(){return{".button":{click:t=>this.my.appendChild(document.createTextNode(" are awesome!!"))}}}get mutations(){return{my:[{childList:(t,e)=>console.log(t)},{childList:(t,e)=>console.log(e)},{childList:"This raises an error"}],button:[{childList:(t,e)=>console.log(t,e)}]}}connectedCallback(){super.connectedCallback(),console.log(this.my)}};c.prototype.template=document.createElement("template");c.prototype.template.innerHTML=`
<button class="button">Click!</button>
<div class="myElement">
    Web Components
</div>
`;customElements.define("my-component",c);var p=class{#t=[];#e="/";#o="/";constructor(){this.current=location.pathname,this.initial=this.current,this.abortController=new AbortController,this.abortSignal=this.abortController.signal,addEventListener("popstate",t=>this.handleHistoryPop(t))}route(t="/",e=()=>{}){this.routes.push({route:t,cb:e}),this.addListener(t,e)}addListener(t,e){document.querySelectorAll(`[href="/${t}"]`).forEach(o=>{o.addEventListener("click",s=>{s.preventDefault(),this.push(t),e()},{signal:this.abortSignal})})}addListeners(){this.routes.forEach(t=>this.addListener(t.route,t.cb))}push(t){history.pushState(t,"",t)}handleHistoryPop(t){this.abortController.abort(),location.pathname===this.initial?location.reload():this.routes.find(e=>t.state===e.route)?.cb?.()}get initial(){return this.#e}set initial(t){this.#e=t}get routes(){return this.#t}set routes(t){this.#t=t}get current(){return this.#o}set current(t){this.#o=t}};var N=()=>{document.body.querySelectorAll(":scope > *").forEach(n=>document.body.removeChild(n))},y=n=>{n.route("router-test",()=>{console.log("Routed to router-test"),N();let t=document.createElement("category-list");t.dataset.pwa="true",document.body.appendChild(t)})};var A=new p;y(A);})();
//# sourceMappingURL=data:application/json;base64,
